AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Amazon Transcribe Live Meeting Assist - Bedrock Agent setup

Parameters:
  
  BedrockModelID:
    Type: String
    Default: "anthropic.claude-3-haiku-20240307-v1:0"
    Description: >-
      Selected LLM Model to use for agent

  BedrockKnowledgeBaseId:
    Type: String
    Default: ""
    AllowedPattern: "^(|[0-9a-zA-Z]{10})$"
    Description: >
      If populated, use existing KB. Otherwise create new KB

  KnowledgeBaseBucketName:
    Type: String
    Default: ""
    Description: >-
      Enter the bucket name of an existing bucket with documents to ingest, or leave blank if you don't need an S3 data source.

  InputDocumentUploadFolderPrefix:
    Type: String
    Default: ""
    Description: >-
      Comma separated list of S3 prefixes with path to your source documents e.g. "my/documents/here/", "prefix1/, prefix2/"

  WebCrawlerURLs:
    Type: String
    Default: ""
    Description: >-
      Comma separated list of public web sites to crawl, or leave blank if you don't need a Web data source.

  WebCrawlerScope:
    Type: String
    AllowedValues:
      - "DEFAULT"
      - "HOST_ONLY"
      - "SUBDOMAINS"
    Default: DEFAULT
    Description: >-
      The scope of what is crawled for your URLs.
      Choose DEFAULT to limit to web pages that have the same host and the same initial path as the source URLs.
      Choose HOST_ONLY to limit to web pages that have the same host as the source URLs.
      Choose SUBDOMAINS to to include sub domains in addition to the host or primary domain.

  SNSEmailAddress:
    Type: String
    Description: >-
      Enter an email address to receive notifications from the SendMessage action group
      
  EnableSalesforceIntegrationParam:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: >-
      Enable Salesforce integration for creating opportunities
      
  EnableJiraIntegrationParam:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: >-
      Enable Jira integration for creating issues
      
  EnableAsanaIntegrationParam:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: >-
      Enable Asana integration for creating tasks

Conditions:
  ShouldCreateBedrockKnowledgeBase:
    !Equals [!Ref BedrockKnowledgeBaseId, ""]
  EnableSalesforceIntegration:
    !Equals [!Ref EnableSalesforceIntegrationParam, "true"]
  EnableJiraIntegration:
    !Equals [!Ref EnableJiraIntegrationParam, "true"]
  EnableAsanaIntegration:
    !Equals [!Ref EnableAsanaIntegrationParam, "true"]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Knowledge Base Data Sources
        Parameters:
          - KnowledgeBaseBucketName
          - InputDocumentUploadFolderPrefix
          - WebCrawlerURLs
          - WebCrawlerScope
      - Label:
          default: Integration Options
        Parameters:
          - EnableSalesforceIntegrationParam
          - EnableJiraIntegrationParam
          - EnableAsanaIntegrationParam

    ParameterLabels:
      KnowledgeBaseBucketName:
        default: Existing S3 bucket with knowledge base source documents (optional).
      InputDocumentUploadFolderPrefix:
        default: S3 prefix(es) for your content (optional)
      WebCrawlerURLs:
        default: Publicly accessible URLs for web crawling (optional)
      WebCrawlerScope:
        default: Web crawl sync scope
      EnableSalesforceIntegrationParam:
        default: Enable Salesforce integration
      EnableJiraIntegrationParam:
        default: Enable Jira integration
      EnableAsanaIntegrationParam:
        default: Enable Asana integration

Resources:

  BEDROCKKB:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateBedrockKnowledgeBase
    Properties:
      TemplateURL: https://s3.<REGION_TOKEN>.amazonaws.com/<ARTIFACT_BUCKET_TOKEN>/<ARTIFACT_PREFIX_TOKEN>/lma-bedrockkb-stack/template.yaml
      Parameters:
        pKnowledgeBaseBucketName: !Ref KnowledgeBaseBucketName
        pInputDocumentUploadFolderPrefix: !Ref InputDocumentUploadFolderPrefix
        pWebCrawlerURLs: !Ref WebCrawlerURLs
        pWebCrawlerScope: !Ref WebCrawlerScope

  # Resourcs for SendMessage action group

  SendMessageTopic:
    Type: AWS::SNS::Topic

  SendMessageTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref SNSEmailAddress
      TopicArn: !Ref SendMessageTopic

  SendMessageFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                  - 'sns:SetSMSAttributes'
                  - 'sns:GetSMSAttributes'
                Resource: !Ref SendMessageTopic

  SendMessageFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.lambda_handler'
      Role: !GetAtt SendMessageFunctionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
              print("Event: ", json.dumps(event))
              agent = event['agent']
              actionGroup = event['actionGroup']
              function = event['function']
              parameters = event.get('parameters', [])

              # Parse parameters
              message = next((param['value'] for param in parameters if param['name'] == 'message'), "No message provided.")
              subject = next((param['value'] for param in parameters if param['name'] == 'subject'), os.environ['DEFAULT_SUBJECT'])

              # Create a new SNS resource
              sns = boto3.client('sns')

              # Publish the message to the topic
              sns_topic_arn = os.environ['SNS_TOPIC_ARN']
              try:
                  message_format = {
                      "default": message,
                      "email": f"Subject: {subject}\n\n{message}"
                  }
                  snsArgs = dict(
                      TopicArn=sns_topic_arn,
                      Message=json.dumps(message_format),
                      MessageStructure='json',
                      Subject=subject
                  )
                  print(f"SNS Args: {snsArgs}")
                  response = sns.publish(**snsArgs)
                  print(f"Message sent! Message ID: {response['MessageId']}"),
                  responseBody =  {
                      "TEXT": {
                          "body": f"Message sent to subscribers."
                      }
                  }
              except ClientError as e:
                  print(e.response['Error']['Message'])
                  responseBody =  {
                      "TEXT": {
                          "body": f"Error sending message: {e.response['Error']['Message']}"
                      }
                  }
                  pass

              action_response = {
                  'actionGroup': actionGroup,
                  'function': function,
                  'functionResponse': {
                      'responseBody': responseBody
                  }
              }
              function_response = {'response': action_response, 'messageVersion': event['messageVersion']}
              print("Response: {}".format(function_response))
              return function_response

      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SendMessageTopic
          DEFAULT_SUBJECT: "Message from Live Meeting Assistant (LMA)"

  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - bedrock.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: BedrockInvokeModel
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - bedrock:InvokeModel
            Resource:
            - Fn::Sub: arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelID}
          - Effect: Allow
            Action:
            - bedrock:Retrieve
            Resource: !If
            - ShouldCreateBedrockKnowledgeBase
            - Fn::Sub: arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${BEDROCKKB.Outputs.KnowledgeBaseID}
            - Fn::Sub: arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${BedrockKnowledgeBaseId}

  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}"
      Description: Bedrock Agent for Live Meeting Assistant stack
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      AutoPrepare: true
      Instruction: "You are an AI Meeting assistant who helps participants during meetings. You have access to the meeting transcript as context and can use various tools to provide assistance."
      FoundationModel: !Ref BedrockModelID
      KnowledgeBases: 
        - Description: Knowledge Base used for looking up answers or fact checking statements using trusted sources
          KnowledgeBaseId: !If
          - ShouldCreateBedrockKnowledgeBase
          - !GetAtt BEDROCKKB.Outputs.KnowledgeBaseID
          - !Ref BedrockKnowledgeBaseId
      ActionGroups:
        - ActionGroupName: SendMessage
          Description: Send a message by SMS or Email
          ActionGroupExecutor:
            Lambda: !GetAtt SendMessageFunction.Arn
          FunctionSchema:
            Functions: 
              - Name: SendMessage
                Description: Send a message by SMS text, or email
                Parameters:
                  message:
                    Type: string
                    Required: true
                    Description: The text of the message to send
                  subject:
                    Type: string
                    Required: false
                    Description: The subject of the message to send
          SkipResourceInUseCheckOnDelete: true
        - !If
          - EnableSalesforceIntegration
          - ActionGroupName: Salesforce
            Description: Create opportunities in Salesforce
            ActionGroupExecutor:
              Lambda: !GetAtt SalesforceFunction.Arn
            FunctionSchema:
              Functions: 
                - Name: CreateOpportunity
                  Description: Create a new opportunity in Salesforce
                  Parameters:
                    name:
                      Type: string
                      Required: true
                      Description: The name of the opportunity
                    amount:
                      Type: string
                      Required: true
                      Description: The amount of the opportunity
                    close_date:
                      Type: string
                      Required: false
                      Description: The close date of the opportunity (YYYY-MM-DD)
                    stage:
                      Type: string
                      Required: false
                      Description: The stage of the opportunity (e.g., Prospecting, Qualification)
                    description:
                      Type: string
                      Required: false
                      Description: A description of the opportunity
                    account_id:
                      Type: string
                      Required: false
                      Description: The Salesforce account ID to associate with this opportunity
            SkipResourceInUseCheckOnDelete: true
          - !Ref AWS::NoValue
        - !If
          - EnableJiraIntegration
          - ActionGroupName: Jira
            Description: Create issues in Jira
            ActionGroupExecutor:
              Lambda: !GetAtt JiraFunction.Arn
            FunctionSchema:
              Functions: 
                - Name: CreateIssue
                  Description: Create a new issue in Jira
                  Parameters:
                    project_key:
                      Type: string
                      Required: true
                      Description: The project key in Jira
                    issue_type:
                      Type: string
                      Required: false
                      Description: The type of issue (e.g., Bug, Task, Story)
                    summary:
                      Type: string
                      Required: true
                      Description: The summary or title of the issue
                    description:
                      Type: string
                      Required: false
                      Description: A detailed description of the issue
                    priority:
                      Type: string
                      Required: false
                      Description: The priority of the issue (e.g., High, Medium, Low)
                    assignee:
                      Type: string
                      Required: false
                      Description: The username of the assignee
                    labels:
                      Type: string
                      Required: false
                      Description: Comma-separated list of labels
            SkipResourceInUseCheckOnDelete: true
          - !Ref AWS::NoValue
        - !If
          - EnableAsanaIntegration
          - ActionGroupName: Asana
            Description: Create tasks in Asana
            ActionGroupExecutor:
              Lambda: !GetAtt AsanaFunction.Arn
            FunctionSchema:
              Functions: 
                - Name: CreateTask
                  Description: Create a new task in Asana
                  Parameters:
                    name:
                      Type: string
                      Required: true
                      Description: The name of the task
                    notes:
                      Type: string
                      Required: false
                      Description: Notes or description for the task
                    project_gid:
                      Type: string
                      Required: false
                      Description: The GID of the project to add the task to
                    workspace_gid:
                      Type: string
                      Required: false
                      Description: The GID of the workspace (if not using default)
                    assignee:
                      Type: string
                      Required: false
                      Description: The GID or email of the assignee
                    due_on:
                      Type: string
                      Required: false
                      Description: The due date (YYYY-MM-DD) or relative date (e.g., 'in 3 days')
            SkipResourceInUseCheckOnDelete: true
          - !Ref AWS::NoValue
  SendMessageFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt BedrockAgent.AgentArn

  SalesforceFunctionPermission:
    Type: AWS::Lambda::Permission
    Condition: EnableSalesforceIntegration
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SalesforceFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt BedrockAgent.AgentArn

  JiraFunctionPermission:
    Type: AWS::Lambda::Permission
    Condition: EnableJiraIntegration
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref JiraFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt BedrockAgent.AgentArn

  AsanaFunctionPermission:
    Type: AWS::Lambda::Permission
    Condition: EnableAsanaIntegration
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AsanaFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt BedrockAgent.AgentArn

  BedrockAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      Description: !Sub "Alias for Agent update: ${BedrockAgent.UpdatedAt}" 
      AgentId: !Ref BedrockAgent
      AgentAliasName: lma-agent

  # Salesforce Integration Resources
  SalesforceSecret:
    Type: AWS::SecretsManager::Secret
    Condition: EnableSalesforceIntegration
    Properties:
      Name: !Sub "${AWS::StackName}-salesforce-credentials"
      Description: "Salesforce API credentials for LMA Bedrock Agent"
      SecretString: '{"instance_url":"https://your-instance.my.salesforce.com","client_id":"your_client_id","client_secret":"your_client_secret","username":"your_username","password":"your_password","security_token":"your_security_token"}'

  SalesforceFunctionRole:
    Type: 'AWS::IAM::Role'
    Condition: EnableSalesforceIntegration
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:UpdateSecretValue'
                Resource: !Ref SalesforceSecret

  SalesforceFunction:
    Type: 'AWS::Lambda::Function'
    Condition: EnableSalesforceIntegration
    Properties:
      Handler: 'salesforce_function.lambda_handler'
      Role: !GetAtt SalesforceFunctionRole.Arn
      Code:
        S3Bucket: <ARTIFACT_BUCKET_TOKEN>
        S3Key: <ARTIFACT_PREFIX_TOKEN>/lma-bedrockagent-stack/src/salesforce_function.py.zip
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          SALESFORCE_SECRET_NAME: !Ref SalesforceSecret

  # Jira Integration Resources
  JiraSecret:
    Type: AWS::SecretsManager::Secret
    Condition: EnableJiraIntegration
    Properties:
      Name: !Sub "${AWS::StackName}-jira-credentials"
      Description: "Jira API credentials for LMA Bedrock Agent"
      SecretString: '{"url":"https://your-domain.atlassian.net","email":"your_email@example.com","api_token":"your_api_token"}'

  JiraFunctionRole:
    Type: 'AWS::IAM::Role'
    Condition: EnableJiraIntegration
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref JiraSecret

  JiraFunction:
    Type: 'AWS::Lambda::Function'
    Condition: EnableJiraIntegration
    Properties:
      Handler: 'jira_function.lambda_handler'
      Role: !GetAtt JiraFunctionRole.Arn
      Code:
        S3Bucket: <ARTIFACT_BUCKET_TOKEN>
        S3Key: <ARTIFACT_PREFIX_TOKEN>/lma-bedrockagent-stack/src/jira_function.py.zip
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          JIRA_SECRET_NAME: !Ref JiraSecret

  # Asana Integration Resources
  AsanaSecret:
    Type: AWS::SecretsManager::Secret
    Condition: EnableAsanaIntegration
    Properties:
      Name: !Sub "${AWS::StackName}-asana-credentials"
      Description: "Asana API credentials for LMA Bedrock Agent"
      SecretString: '{"access_token":"your_access_token","workspace_gid":"your_workspace_gid"}'

  AsanaFunctionRole:
    Type: 'AWS::IAM::Role'
    Condition: EnableAsanaIntegration
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref AsanaSecret

  AsanaFunction:
    Type: 'AWS::Lambda::Function'
    Condition: EnableAsanaIntegration
    Properties:
      Handler: 'asana_function.lambda_handler'
      Role: !GetAtt AsanaFunctionRole.Arn
      Code:
        S3Bucket: <ARTIFACT_BUCKET_TOKEN>
        S3Key: <ARTIFACT_PREFIX_TOKEN>/lma-bedrockagent-stack/src/asana_function.py.zip
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          ASANA_SECRET_NAME: !Ref AsanaSecret

Outputs:

  AgentId:
    Value: !GetAtt BedrockAgent.AgentId
    Description: Bedrock Agent Id

  AgentAliasId:
    Value: !GetAtt BedrockAgentAlias.AgentAliasId
    Description: Bedrock Agent Alias Id

  SNSTopicForAgentMessages:
    Value: !GetAtt SendMessageTopic.TopicName
    Description: Agent SendMessage SNS Topic ARN - Add subscriptions to this topic to receive messages from the agent
    
  SalesforceSecretName:
    Condition: EnableSalesforceIntegration
    Value: !Ref SalesforceSecret
    Description: Secret containing Salesforce credentials - update with your actual credentials
    
  JiraSecretName:
    Condition: EnableJiraIntegration
    Value: !Ref JiraSecret
    Description: Secret containing Jira credentials - update with your actual credentials
    
  AsanaSecretName:
    Condition: EnableAsanaIntegration
    Value: !Ref AsanaSecret
    Description: Secret containing Asana credentials - update with your actual credentials

