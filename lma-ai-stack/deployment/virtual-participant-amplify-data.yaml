AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Virtual Participant Amplify Data - Simple Approach

Parameters:
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID
  
  AppSyncApiId:
    Type: String
    Description: Existing AppSync API ID to extend

Resources:
  # Simple DynamoDB table for Virtual Participants
  VirtualParticipantTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-VirtualParticipant"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Data source for Virtual Participant table
  VirtualParticipantDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref AppSyncApiId
      Name: VirtualParticipantTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt VirtualParticipantDataSourceRole.Arn
      DynamoDBConfig:
        TableName: !Ref VirtualParticipantTable
        AwsRegion: !Ref AWS::Region

  VirtualParticipantDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: appsync.amazonaws.com
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt VirtualParticipantTable.Arn

  # Simple resolvers using direct DynamoDB operations
  CreateVirtualParticipantResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref AppSyncApiId
      TypeName: Mutation
      FieldName: createVirtualParticipant
      DataSourceName: !GetAtt VirtualParticipantDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($util.autoId())
          },
          "attributeValues": {
            "meetingName": $util.dynamodb.toDynamoDBJson($ctx.args.input.meetingName),
            "meetingPlatform": $util.dynamodb.toDynamoDBJson($ctx.args.input.meetingPlatform),
            "meetingId": $util.dynamodb.toDynamoDBJson($ctx.args.input.meetingId),
            "meetingPassword": $util.dynamodb.toDynamoDBJson($ctx.args.input.meetingPassword),
            "status": $util.dynamodb.toDynamoDBJson($ctx.args.input.status),
            "owner": $util.dynamodb.toDynamoDBJson($ctx.identity.username),
            "createdAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601()),
            "updatedAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  UpdateVirtualParticipantResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref AppSyncApiId
      TypeName: Mutation
      FieldName: updateVirtualParticipant
      DataSourceName: !GetAtt VirtualParticipantDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
          },
          "update": {
            "expression": "SET #status = :status, #updatedAt = :updatedAt",
            "expressionNames": {
              "#status": "status",
              "#updatedAt": "updatedAt"
            },
            "expressionValues": {
              ":status": $util.dynamodb.toDynamoDBJson($ctx.args.input.status),
              ":updatedAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
            }
          },
          "returnValues": "ALL_NEW"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.Attributes)

  ListVirtualParticipantsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref AppSyncApiId
      TypeName: Query
      FieldName: listVirtualParticipants
      DataSourceName: !GetAtt VirtualParticipantDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  # Simple subscription resolver (no complex authorization)
  OnUpdateVirtualParticipantResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref AppSyncApiId
      TypeName: Subscription
      FieldName: onUpdateVirtualParticipant
      DataSourceName: !GetAtt SubscriptionDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "payload": {}
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  # NONE data source for subscription
  SubscriptionDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref AppSyncApiId
      Name: SubscriptionNone
      Type: NONE

Outputs:
  VirtualParticipantTableName:
    Description: Virtual Participant DynamoDB Table Name
    Value: !Ref VirtualParticipantTable
  
  VirtualParticipantTableArn:
    Description: Virtual Participant DynamoDB Table ARN
    Value: !GetAtt VirtualParticipantTable.Arn
