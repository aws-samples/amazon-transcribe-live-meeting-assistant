input AddTranscriptSegmentInput {
	CallId: ID!
	Status: CallStatus!
	SegmentId: ID!
	StartTime: Float!
	EndTime: Float!
	Transcript: String!
	IsPartial: Boolean!
	Channel: Channel!
	Speaker: String!
	CreatedAt: AWSDateTime
	ExpiresAfter: AWSTimestamp
	Sentiment: Sentiment
	SentimentScore: SentimentScoreInput
	SentimentWeighted: Float
	Owner: String
	SharedWith: String
}

input ShareTranscriptSegmentInput {
	PK: ID!
	SK: ID!
	SharedWith: [String!]
}

type ShareTranscriptSegmentOutput @aws_iam {
	PK: ID
}

input DeleteTranscriptSegmentInput {
	PK: ID!
	SK: ID!
}

type Call implements DynamoDbBase @aws_cognito_user_pools
@aws_iam {
	PK: ID!
	SK: ID!
	CreatedAt: AWSDateTime!
	UpdatedAt: AWSDateTime!
	ExpiresAfter: AWSTimestamp
	CallId: ID!
	CustomerPhoneNumber: String
	Sentiment: SentimentAggregation
	SystemPhoneNumber: String
	Status: CallStatus
	RecordingUrl: String
	PcaUrl: String
	TotalConversationDurationMillis: Float
	AgentId: String
	Metadatajson: String
	CallCategories: [String]
	IssuesDetected: String
	CallSummaryText: String
	Owner: String
	SharedWith: String
}

type CallList @aws_cognito_user_pools
@aws_iam {
	Calls: [CallListItem]
	nextToken: String
}

type CallListItem implements DynamoDbBase @aws_cognito_user_pools
@aws_iam {
	PK: ID!
	SK: ID!
	CreatedAt: AWSDateTime!
	UpdatedAt: AWSDateTime!
	ExpiresAfter: AWSTimestamp
	CallId: ID!
	Owner: String
	SharedWith: String
}

enum CallStatus {
	STARTED
	TRANSCRIBING
	ERRORED
	ENDED
}

enum Channel {
	CALLER
	AGENT
	AGENT_VOICETONE
	CALLER_VOICETONE
	AGENT_ASSISTANT
	CATEGORY_MATCH
}

input CreateCallInput {
	CallId: ID!
	AgentId: String
	CreatedAt: AWSDateTime
	CustomerPhoneNumber: String
	SystemPhoneNumber: String
	Metadatajson: String
	ExpiresAfter: AWSTimestamp
	Owner: String
	SharedWith: String
}

type CreateCallOutput @aws_iam {
	CallId: ID!
	Owner: String
	SharedWith: String
}

input ShareMeetingsItem {
	CallId: ID!
	ListPK: ID!
	ListSK: ID!
}

input ShareMeetingsInput {
	Calls: [ShareMeetingsItem]
	MeetingRecipients: String
}

type ShareMeetingsOutput {
	Calls: [ID!]
	Result: String
	Owner: String
	SharedWith: String
}

input DeleteMeetingsItem {
	CallId: ID!
	ListPK: ID!
	ListSK: ID!
}

input DeleteMeetingsInput {
	Calls: [DeleteMeetingsItem]
}

type DeleteMeetingsOutput {
	Result: String
}

interface DynamoDbBase {
	PK: ID!
	SK: ID!
	CreatedAt: AWSDateTime!
	UpdatedAt: AWSDateTime
	ExpiresAfter: AWSTimestamp
}

type Mutation @aws_iam {
	createCall(input: CreateCallInput!): CreateCallOutput
	updateCallStatus(input: UpdateCallStatusInput!): Call
	updateCallAggregation(input: UpdateCallAggregationInput!): Call
	updateRecordingUrl(input: UpdateRecordingUrlInput!): Call
	updatePcaUrl(input: UpdatePcaUrlInput!): Call
	updateAgent(input: UpdateAgentInput!): Call
	addCallCategory(input: AddCallCategoryInput!): Call
	addIssuesDetected(input: AddIssuesDetectedInput!): Call
	addCallSummaryText(input: AddCallSummaryTextInput!): Call
	addTranscriptSegment(input: AddTranscriptSegmentInput!): TranscriptSegment
	deleteCall(input: DeleteCallInput!): DeleteCallOutput
	shareCall(input: ShareCallInput!): ShareCallOutput
	unshareCall(input: UnshareCallInput!): UnshareCallOutput
	deleteTranscriptSegment(input: DeleteTranscriptSegmentInput!): DeleteTranscriptSegmentOutput
	shareTranscriptSegment(input: ShareTranscriptSegmentInput!): ShareTranscriptSegmentOutput
    shareMeetings(input: ShareMeetingsInput!): ShareMeetingsOutput @aws_cognito_user_pools
	deleteMeetings(input: DeleteMeetingsInput!): DeleteMeetingsOutput @aws_cognito_user_pools
}

type OverallSentiment @aws_cognito_user_pools
@aws_iam {
	AGENT: Float
	CALLER: Float
	AGENT_VOICETONE: Float
	CALLER_VOICETONE: Float
}

input OverallSentimentInput {
	AGENT: Float
	CALLER: Float
	AGENT_VOICETONE: Float
	CALLER_VOICETONE: Float
}

type Query @aws_cognito_user_pools
@aws_iam {
	getCall(CallId: ID!): Call
	getTranscriptSegments(callId: ID!, isPartial: Boolean): TranscriptSegmentList
	getTranscriptSegmentsWithSentiment(callId: ID!): TranscriptSegmentsWithSentimentList
	listCalls(endDateTime: AWSDateTime, startDateTime: AWSDateTime): CallList
	listCallsDateHour(date: AWSDate, hour: Int): CallList
	listCallsDateShard(date: AWSDate, shard: Int): CallList
    queryKnowledgeBase(input: String!, sessionId: String): String
}

enum Sentiment {
	POSITIVE
	NEGATIVE
	NEUTRAL
	MIXED
}

type SentimentAggregation @aws_cognito_user_pools
@aws_iam {
	OverallSentiment: OverallSentiment
	SentimentByPeriod: SentimentByPeriod
}

input SentimentAggregationInput {
	OverallSentiment: OverallSentimentInput
	SentimentByPeriod: SentimentByPeriodInput
}

type SentimentByChannel @aws_cognito_user_pools
@aws_iam {
	AGENT: [SentimentByChannelEntry]
	CALLER: [SentimentByChannelEntry]
	AGENT_VOICETONE: [SentimentByChannelEntry]
	CALLER_VOICETONE: [SentimentByChannelEntry]
}

type SentimentByChannelEntry @aws_cognito_user_pools
@aws_iam {
	BeginOffsetMillis: Float
	EndOffsetMillis: Float
	Score: Float
}

input SentimentByChannelEntryInput {
	BeginOffsetMillis: Float
	EndOffsetMillis: Float
	Score: Float
}

input SentimentByChannelInput {
	AGENT: [SentimentByChannelEntryInput]
	CALLER: [SentimentByChannelEntryInput]
	AGENT_VOICETONE: [SentimentByChannelEntryInput]
	CALLER_VOICETONE: [SentimentByChannelEntryInput]
}

type SentimentByPeriod @aws_cognito_user_pools
@aws_iam {
	QUARTER: SentimentByChannel
}

input SentimentByPeriodInput {
	QUARTER: SentimentByChannelInput
}

type SentimentScore @aws_cognito_user_pools
@aws_iam {
	Positive: Float!
	Negative: Float!
	Neutral: Float!
	Mixed: Float!
}

input SentimentScoreInput {
	Positive: Float!
	Negative: Float!
	Neutral: Float!
	Mixed: Float!
}

type Subscription {
	onCreateCall: CreateCallOutput
		@aws_subscribe(mutations: ["createCall"])
	onUpdateCall(CallId: ID): Call
		@aws_subscribe(mutations: ["updateCallStatus","updateCallAggregation","updateRecordingUrl","updatePcaUrl","updateAgent", "addCallCategory", "addIssuesDetected", "addCallSummaryText"])
	onAddTranscriptSegment(CallId: ID, Channel: String): TranscriptSegment
		@aws_subscribe(mutations: ["addTranscriptSegment"])
	onShareMeetings: ShareMeetingsOutput
		@aws_subscribe(mutations: ["shareMeetings"])
	onDeleteCall: DeleteCallOutput
		@aws_subscribe(mutations: ["deleteCall"])
	onUnshareCall: UnshareCallOutput
		@aws_subscribe(mutations: ["unshareCall"])
}

type TranscriptSegment implements DynamoDbBase @aws_cognito_user_pools
@aws_iam {
	PK: ID!
	SK: ID!
	CreatedAt: AWSDateTime!
	UpdatedAt: AWSDateTime
	ExpiresAfter: AWSTimestamp
	CallId: ID!
	SegmentId: ID!
	StartTime: Float!
	EndTime: Float!
	Transcript: String!
	IsPartial: Boolean!
	Channel: Channel!
	Speaker: String!
	Sentiment: Sentiment
	SentimentScore: SentimentScore
	SentimentWeighted: Float
	Owner: String
	SharedWith: String
}

type TranscriptSegmentList @aws_cognito_user_pools
@aws_iam {
	TranscriptSegments: [TranscriptSegment]
	nextToken: String
}

type TranscriptSegmentWithSentiment implements DynamoDbBase @aws_cognito_user_pools
@aws_iam {
	PK: ID!
	SK: ID!
	CreatedAt: AWSDateTime!
	UpdatedAt: AWSDateTime
	ExpiresAfter: AWSTimestamp
	CallId: ID!
	SegmentId: ID!
	StartTime: Float!
	EndTime: Float!
	Channel: Channel!
	Speaker: String!
	Sentiment: Sentiment
	SentimentWeighted: Float
	Owner: String
	SharedWith: String
}
type TranscriptSegmentsWithSentimentList @aws_cognito_user_pools
@aws_iam {
	TranscriptSegmentsWithSentiment: [TranscriptSegmentWithSentiment]
	nextToken: String
}
input UpdateAgentInput {
	CallId: ID!
	AgentId: String!
	UpdatedAt: AWSDateTime
	Owner: String
	SharedWith: String
}

input AddCallCategoryInput {
	CallId: ID!
	CallCategories: [String]
	UpdatedAt: AWSDateTime
	Owner: String
	SharedWith: String
}

input AddIssuesDetectedInput {
	CallId: ID!
	IssuesDetected: String!
	UpdatedAt: AWSDateTime
	Owner: String
	SharedWith: String
}

input AddCallSummaryTextInput {
	CallId: ID!
	CallSummaryText: String!
	UpdatedAt: AWSDateTime
	Owner: String
	SharedWith: String
}

input UpdateCallAggregationInput {
	CallId: ID!
	UpdatedAt: AWSDateTime
	TotalConversationDurationMillis: Float
	Sentiment: SentimentAggregationInput
	Owner: String
	SharedWith: String
}

input UpdateCallStatusInput {
	CallId: ID!
	Status: CallStatus!
	UpdatedAt: AWSDateTime
	Owner: String
	SharedWith: String
}

input UpdateRecordingUrlInput {
	CallId: ID!
	RecordingUrl: String!
	UpdatedAt: AWSDateTime
	Owner: String
	SharedWith: String
}

input UpdatePcaUrlInput {
	CallId: ID!
	PcaUrl: String!
	UpdatedAt: AWSDateTime
	Owner: String
	SharedWith: String
}

input ShareCallInput {
	CallId: ID!
	ListPK: ID!
	ListSK: ID!
	SharedWith: [String]
	Owner: String
}

input DeleteCallInput {
	CallId: ID!
	ListPK: ID!
	ListSK: ID!
	Owner: String
	SharedWith: String
}

type DeleteCallOutput @aws_iam {
	CallId: ID!
	Owner: String
	SharedWith: String
}

type ShareCallOutput @aws_iam {
	CallId: ID!
	Owner: String
	SharedWith: String
}

type DeleteTranscriptSegmentOutput @aws_iam {
	CallId: ID
}

input UnshareCallInput {
	CallId: ID!
	SharedWith: [String!]
}

type UnshareCallOutput @aws_iam {
	CallId: ID!
	SharedWith: [String!]
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}